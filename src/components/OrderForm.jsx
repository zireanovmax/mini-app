import React, { useState, useEffect, useRef } from 'react';

const SHIPPING_LOCATIONS = [
  '–¢–∏—Ä–∞—Å–ø–æ–ª—å –¶–µ–Ω—Ç—Ä (–¢–¶–¢)',
  '–¢–∏—Ä–∞—Å–ø–æ–ª—å –ë–∞–ª–∫–∞',
  '–ë–µ–Ω–¥–µ—Ä—ã –¶–µ–Ω—Ç—Ä',
  '–ë–µ–Ω–¥–µ—Ä—ã –ë–∞–º (–¢–¶–ë)',
  '–†—ã–±–Ω–∏—Ü–∞ 2',
  '–†—ã–±–Ω–∏—Ü–∞',
  '–î—É–±–æ—Å—Å–∞—Ä—ã',
  '–ì—Ä–∏–≥–æ—Ä–∏–æ–ø–æ–ª—å',
  '–ö–∞–º–µ–Ω–∫–∞',
  '–°–ª–æ–±–æ–¥–∑–µ—è',
  '–î–Ω–µ—Å—Ç—Ä–æ–≤—Å–∫',
  '–ü–µ—Ä–≤–æ–º–∞–π—Å–∫',
  '–°–∫–ª–∞–¥'
];

const OrderForm = ({
  cart,
  totalPrice,
  onClose,
  onOrderSubmit,
  clientInfo
}) => {
  // üéØ –õ–û–ì: —Ñ–æ—Ä–º–∞ –æ—Ç–∫—Ä—ã–ª–∞—Å—å
  console.log('üìã OrderForm –æ—Ç–∫—Ä—ã—Ç–∞');
  console.log('üë§ clientInfo:', clientInfo);
  console.log('üßæ –§–ò–û:', clientInfo?.name);
  console.log('üìû –¢–µ–ª–µ—Ñ–æ–Ω:', clientInfo?.phone);
  console.log('üîç –¢–∏–ø clientInfo:', typeof clientInfo);
  console.log('üì¶ –ü–æ–ª—è clientInfo:', Object.keys(clientInfo));
  console.log('üßæ clientInfo.name:', clientInfo?.name);
  console.log('üìû clientInfo.phone:', clientInfo?.phone);

  const [formData, setFormData] = useState({
    name: clientInfo?.name || '',
    phone: clientInfo?.phone || '',
    address: '',
    comments: ''
  });

  console.log('üß™ formData –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', formData);

  const filledFromClient = useRef(false);

  useEffect(() => {
    console.log('üîÅ useEffect —Å—Ä–∞–±–æ—Ç–∞–ª, clientInfo:', clientInfo);
    if (clientInfo?.name && !filledFromClient.current) {
      console.log('‚úÖ –ó–∞–ø–æ–ª–Ω—è–µ–º —Ñ–æ—Ä–º—É –∏–∑ clientInfo');
      setFormData({
        name: clientInfo.name,
        phone: clientInfo.phone || '',
        address: '',
        comments: ''
      });
      filledFromClient.current = true;
    }
  }, [JSON.stringify(clientInfo)]);

  useEffect(() => {
    if (!clientInfo) {
      filledFromClient.current = false;
    }
  }, [clientInfo]);

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    if (!formData.name.trim()) return alert('–£–∫–∞–∂–∏—Ç–µ –§–ò–û');
    if (!formData.phone.trim()) return alert('–£–∫–∞–∂–∏—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω');
    if (!formData.address) return alert('–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏');

    const orderData = {
      type: 'order',
      cart: cart.map(item => ({
        id: item.id,
        model: item.model,
        manufacturer: item.manufacturer,
        code: item.code,
        quantity: item.quantity,
        price: parseFloat(item.newPrice?.replace(/\s/g, '') || item.oldPrice?.replace(/\s/g, '') || '0'),
        priceLevel: item.priceLevel || 'retail'
      })),
      totalPrice,
      customerInfo: formData
    };

    onOrderSubmit(orderData);
  };

  return (
    <div className="fixed inset-0 z-50 overflow-y-auto">
      <div className="flex items-center justify-center min-h-screen p-4">
        <div className="relative bg-white rounded-lg shadow-xl max-w-md w-full max-h-[90vh] overflow-hidden flex flex-col">
          {/* header */}
          <div className="flex items-center justify-between p-6 border-b flex-shrink-0">
            <h2 className="text-2xl font-bold">–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>
            <button
              onClick={onClose}
              className="text-gray-400 hover:text-gray-600 text-2xl"
            >
              √ó
            </button>
          </div>

          {/* form body */}
          <div className="flex-1 overflow-y-auto p-6">
            <form onSubmit={handleSubmit} className="space-y-4">
              {/* name */}
              <div>
                <label className="block text-sm font-medium mb-1">–§–ò–û *</label>
                <input
                  type="text"
                  name="name"
                  value={formData.name}
                  onChange={handleChange}
                  required
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û"
                />
                {clientInfo?.name && (
                  <p className="text-xs text-green-600 mt-1">‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è</p>
                )}
              </div>

              {/* phone */}
              <div>
                <label className="block text-sm font-medium mb-1">–¢–µ–ª–µ—Ñ–æ–Ω *</label>
                <input
                  type="tel"
                  name="phone"
                  value={formData.phone}
                  onChange={handleChange}
                  required
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="(XXX) XX-XXX"
                />
                {clientInfo?.phone && (
                  <p className="text-xs text-green-600 mt-1">‚úì –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è</p>
                )}
              </div>

              {/* shipping */}
              <div>
                <label className="block text-sm font-medium mb-1">–ú–µ—Å—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏ *</label>
                <select
                  name="address"
                  value={formData.address}
                  onChange={handleChange}
                  required
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                >
                  <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—Ç–æ –æ—Ç–≥—Ä—É–∑–∫–∏</option>
                  {SHIPPING_LOCATIONS.map((loc) => (
                    <option key={loc} value={loc}>{loc}</option>
                  ))}
                </select>
              </div>

              {/* comments */}
              <div>
                <label className="block text-sm font-medium mb-1">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∑–∞–∫–∞–∑—É</label>
                <textarea
                  name="comments"
                  value={formData.comments}
                  onChange={handleChange}
                  rows={3}
                  className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è"
                />
              </div>

              

              {/* total */}
              <div className="bg-gray-50 p-4 rounded-lg">
                <p className="font-semibold">–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: {new Intl.NumberFormat('ru-RU').format(totalPrice)} —Ä—É–±.</p>
                <p className="text-sm text-gray-600">–¢–æ–≤–∞—Ä–æ–≤: {cart.reduce((s, i) => s + i.quantity, 0)} —à—Ç.</p>
                
              </div>
            </form>
          </div>

          {/* footer buttons */}
          <div className="border-t p-6 bg-gray-50 flex-shrink-0">
            <div className="flex gap-3">
              <button
                type="button"
                onClick={onClose}
                className="flex-1 bg-gray-300 hover:bg-gray-400 text-gray-800 py-3 px-4 rounded-lg font-medium transition-colors"
              >
                –ù–∞–∑–∞–¥
              </button>
              <button
                type="submit"
                onClick={handleSubmit}
                className="flex-1 bg-green-600 hover:bg-green-700 text-white py-3 px-4 rounded-lg font-medium transition-colors"
              >
                –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default OrderForm;