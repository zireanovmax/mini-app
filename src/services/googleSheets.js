// src/services/googleSheets.js
import Papa from 'papaparse';

const GOOGLE_SHEETS_URL = 'https://docs.google.com/spreadsheets/d/e/2PACX-1vSJ8tsvuiWl7mgYleNNGzJwc663w1NTysU5RkHmWJj___4vvOXaUoM0mPqW8F4iYr_RbWmi1ixShNcv/pub?output=csv';

function fixImage(url, size = 'w300-h300-c') {
  if (!url) return '';
  let id = '';
  if (url.includes('/file/d/')) id = url.split('/file/d/')[1]?.split('/')[0];
  else if (url.includes('id=')) id = url.split('id=')[1].split('&')[0];
  else return url;
  return `https://drive.google.com/thumbnail?id=${id}&sz=${size}`;
}

export class GoogleSheetsService {
  static async fetchProducts(clientLevel = null) {
    try {
      console.log('üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
      const response = await fetch(GOOGLE_SHEETS_URL);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }
      const csvText = await response.text();
      console.log('‚úÖ CSV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');

      const products = this.parseCSVWithPapaParse(csvText, clientLevel);
      console.log('üìä –†–∞—Å–ø–∞—Ä—Å–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤:', products.length);
      return products;
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
      throw error;
    }
  }

  static parseCSVWithPapaParse(csvText, clientLevel) {
    const result = Papa.parse(csvText, {
      header: true,
      skipEmptyLines: true,
      transformHeader: h => h.trim().toLowerCase(),
    });

    if (result.errors.length) {
      console.warn('‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è PapaParse:', result.errors);
    }

    return result.data
      .map((raw, idx) => this.formatProduct(raw, idx + 1, clientLevel))
      .filter(Boolean);
  }

  static formatProduct(raw, id, clientLevel) {
    console.log('üîß –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–¥—É–∫—Ç:', {
      model: raw['–º–æ–¥–µ–ª—å'],
      clientLevel: clientLevel
    });

    const originalPhotoUrl = raw['—Ñ–æ—Ç–æ'] || '';
    const fixedPhotoUrl = fixImage(originalPhotoUrl);

    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è –∫–ª–∏–µ–Ω—Ç–∞
    const priceData = this.getPriceForLevel(raw, clientLevel);
    console.log('üí∞ –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–±–æ—Ä–∞ —Ü–µ–Ω—ã:', priceData);

    const product = {
      id,
      photo: fixedPhotoUrl,
      code: raw['–∫–æ–¥'] || '',
      model: this.createModelName(raw),
      wifi: this.extractWifi(raw),
      oldPrice: raw['—Ä–æ–∑–Ω–∏—Ü–∞ (—Ä—É–±.)'] || raw['—Ä–æ–∑–Ω–∏—Ü–∞'] || '',
      discount: raw['—Å–∫–∏–¥–∫–∞ –æ–ø—Ç–æ–≤–∞—è %'] || raw['—Å–∫–∏–¥–∫–∞'] || '',
      retailDiscount: raw['—Å–∫–∏–¥–∫–∞ —Ä–æ–∑–Ω–∏—Ü–∞ %'] || raw['—Å–∫–∏–¥–∫–∞ —Ä–æ–∑–Ω–∏—Ü–∞'] || '',
      newPrice: priceData.price,
      priceLevel: priceData.level,
      category: this.determineCategory(raw),
      description: raw['–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] || raw['–æ–ø–∏—Å–∞–Ω–∏–µ'] || '',
      manufacturer: raw['–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'] || '',
      productModel: raw['–º–æ–¥–µ–ª—å'] || '',
      type: this.extractType(raw),
      power: this.extractPower(raw),
      originalPhoto: originalPhotoUrl,
    };

    return product.model ? product : null;
  }

  static getPriceForLevel(raw, clientLevel) {
    console.log('üéØ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–µ–Ω—É –¥–ª—è —É—Ä–æ–≤–Ω—è:', clientLevel);
    
    // –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ–ø—Ç–æ–≤—ã–π –∏–ª–∏ —É—Ä–æ–≤–µ–Ω—å –Ω–µ —É–∫–∞–∑–∞–Ω - —Ä–æ–∑–Ω–∏—á–Ω–∞—è —Ü–µ–Ω–∞
    if (!clientLevel) {
      return {
        price: raw['—Ä–æ–∑–Ω–∏—Ü–∞ (—Ä—É–±.)'] || raw['—Ä–æ–∑–Ω–∏—Ü–∞'] || '',
        level: 'retail'
      };
    }

    // –ò—â–µ–º —Ü–µ–Ω—É –¥–ª—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è
    const priceColumn = this.getPriceColumnForLevel(clientLevel);
    const price = raw[priceColumn] || '';

    console.log('üìä –ù–∞–π–¥–µ–Ω–∞ —Ü–µ–Ω–∞:', { priceColumn, price });

    // –ï—Å–ª–∏ —Ü–µ–Ω–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–∑–Ω–∏—á–Ω—É—é
    if (!price) {
      console.warn(`‚ö†Ô∏è –¶–µ–Ω–∞ –¥–ª—è —É—Ä–æ–≤–Ω—è ${clientLevel} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–æ–∑–Ω–∏—á–Ω—É—é`);
      return {
        price: raw['—Ä–æ–∑–Ω–∏—Ü–∞ (—Ä—É–±.)'] || raw['—Ä–æ–∑–Ω–∏—Ü–∞'] || '',
        level: 'retail'
      };
    }

    return {
      price: price,
      level: clientLevel
    };
  }

  static getPriceColumnForLevel(level) {
    const columnMap = {
      'opt1': '–æ–ø—Ç1 (—Ä—É–±.)',
      'opt2': '–æ–ø—Ç2 (—Ä—É–±.)', 
      'opt3': '–æ–ø—Ç3 (—Ä—É–±.)'
    };
    
    return columnMap[level] || '—Ä–æ–∑–Ω–∏—Ü–∞ (—Ä—É–±.)';
  }

  /* ---------- –æ—Å—Ç–∞–ª—å–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã ---------- */

  static createModelName(rawProduct) {
    const manufacturer = rawProduct['–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å'];
    const model = rawProduct['–º–æ–¥–µ–ª—å'];
    if (manufacturer && model) {
      return `${manufacturer} ${model}`;
    }
    return model || manufacturer || null;
  }

  static extractWifi(rawProduct) {
    const raw = (rawProduct['–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] || '').trim();
    if (!raw) return '–ù–µ—Ç';

    const parts = raw.split('\\').filter(Boolean);
    const last = parts.at(-1)?.toLowerCase().replace(/\d+$/, '').trim();
    switch (last) {
      case '–µ—Å—Ç—å': return '–ï—Å—Ç—å';
      case '–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ': return '–û–ø—Ü–∏—è';
      default: return '–ù–µ—Ç';
    }
  }

  static extractPower(rawProduct) {
    const raw = rawProduct['–æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞'] || '';
    const m = raw.match(/\b(\d{4,5})\b/);
    return m ? `${m[1]} BTU` : null;
  }

  static extractType(rawProduct) {
    const raw = (rawProduct['–æ–ø–∏—Å–∞–Ω–∏–µ'] || '').toLowerCase();
    if (raw.includes('invertor')) return '–ò–Ω–≤–µ—Ä—Ç–æ—Ä';
    if (raw.includes('on') && (raw.includes('off') || raw.includes('|'))) return 'ON-OFF';
    return 'ON-OFF';
  }

  static determineCategory(rawProduct) {
    const menu = (rawProduct['–º–µ–Ω—é'] || '').toLowerCase();

    if (menu.includes('–º–æ–±–∏–ª—å')) return 'mobile';
    if (menu.includes('–Ω–∞–ø–æ–ª—å–Ω–æ') || menu.includes('–ø–æ—Ç–æ–ª–æ—á')) return 'floorCeiling';
    if (menu.includes('–∫–∞–Ω–∞–ª')) return 'duct';
    if (menu.includes('–∫–∞—Å—Å–µ—Ç')) return 'cassette';
    if (menu.includes('–º—É–ª—å—Ç–∏')) return 'multi';
    if (menu.includes('—Ç—Ä—É–±') || menu.includes('–º–∞—Ç–µ—Ä–∏–∞–ª') || menu.includes('—Ñ–∏—Ç–∏–Ω–≥') || menu.includes('–∏–∑–æ–ª')) return 'materials';
    return 'split';
  }
}